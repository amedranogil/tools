	<chapter>
    	<title>Technical Overview</title>
    	<para>In this chapter we are going to clarify the basic technical aspect of using universAAL and the available tools. This includes
    	the needed preparation of the development environment as well as the installation of all the tools.</para>
    	
    	<section>
    	<title>Setup of the development environment</title>
    	
    	<para>Mainly we can refer here to DH1, DH2 and DH3. Please make sure that the lighting-example presented is running without errors to make sure
    	that your development environment is well prepared the run with universAAL. In the following we give on overview of the very basics needed
    	to use the tools we are presention in the following chapter.</para>
    	
    	<para>One feasible solution to easy install everything you need, is an installer package available as <ulink url="ftp://ftp.igd.fraunhofer.de/outgoing/cstocklo/instaal-64.exe">64-bit version</ulink>
		and <ulink url="ftp://ftp.igd.fraunhofer.de/outgoing/cstocklo/instaal-32.exe">32-bit version</ulink>. Just execute the downloaded file and
		follow this wizard trough the different installation steps. This tool install Eclipse including	needed plug-in's and My-SQL which is
		needed by some components of the middleware. Currently it contains no one of universAAL tools, so they have to be installed seperatly
		anyway. Because we can not make sure that the install-packages will be updated properly, we currently suggest to make the full installation
		by your own like shown in DH2 and use the installer in case of any trouble.
		</para>
		
		<para>The AAL Studio is based on Eclipse, so the primary prerequisite for installing it is to have a compatible Eclipse version installed.
		The version we currently recommend is Eclipse 3.5 Modeling Tools, which can be downloaded from:</para>
		
		<ulink url="http://www.eclipse.org/downloads/packages/release/galileo/sr2"></ulink>
		
		<para>Currently not all needed plug-in's (Primary the Pax-Runner) support a higher version of Eclipse, but in future we are intending to move
		to Eclipse 3.6 Modeling Tools. After installing Eclipse, you will also need some prerequisite Eclipse plugins before installing the universAAL
		tools. Beside of special needs of every tool we will needthe following plug-in's anyway:</para>
		
		<itemizedlist>
			<title></title>
			<listitem><para><emphasis>m2Eclipse maven support</emphasis>: http://m2eclipse.sonatype.org/sites/m2e/0.10.2.20100623-1649/</para></listitem>
			<listitem><para><emphasis>Pax Runner for Eclipse</emphasis>: http://www.ops4j.org/pax/eclipse/update</para></listitem>
			<listitem><para><emphasis>AAL Studio</emphasis>: http://forge.universaal.org/eclipse-update/</para></listitem>
		</itemizedlist>
	
		<para>To install the plug-in's please use the appropriate feature from Eclipse at Help -> Install New Software. Taking the AAL Studio
		as an example you need to fill-out the dialog like shown in Figure 2, starting with the URL of the updatepage in the "Working With" field at
		the top. </para>

		<figure>
			<title>Eclipse Plug-In installation</title>
			<graphic width="200px" align="center" fileref="newmedia/installplugin/InstallDialog.png"/>
		</figure>
		
		<para>Because currently the last two parts of the AAL Suite are not implemented please do not check them! In case of an trouble by installing
		the needed plug-in's you can get help from the <ulink url="http://help.eclipse.org/galileo/index.jsp/">Eclipse Help Page (http://help.eclipse.org)</ulink>.
		If no more information to an other tool will be provided you can assume that installation process is the same like described before and
		a link to the updatepage will be given.</para>
		</section>
		
		<section>
			<title>About universAAL applications</title>
			<para>Here we want to go to describe basically the usage of the universAAL tools. But never the less we also need to have some
			basics in mind to understand why and where to use every tool. First you have to understand what we are talking about when we are
			creating an universAAL application. The universAAL middleware is based on the OSGi framework (<ulink url="http://www.osgi.org/Main/HomePage">http://www.osgi.org/Main/HomePage</ulink>),
			that provides a platform that empowers developers to split large and complex Java programs into a set of single independent modules, called <emphasis>bundle</emphasis>
			(more exactly universAAL uses Apache-Felix and appropriate bundles as implementation of the OSGi concept and interfaces).
			This modules can be loaded, started and stopped during runtime of the whole environment. This is also used in DH2 and therefore
			we do not want to get lost into details. But in short terms we are going to provide at least one valid OSGi bundle for every application.
			For every bundle we also need to have one project in Eclipse workspace. Internally every bundle is quite similar to a normal Java-Application
			(assuming that we are using Java), except that we have instead of a main-function a start-function that will be performed every time the
			bundle is started in the OSGi environment. Now universAAL can be used to easy setup services that made be available within a network area.
			A service is something that have a well defined input (e.g. nothing or a simple number), processing remote a special function and send back
			an also well defined output. Since the runtime of the environment do not depend on the lifetime of a special bundle (as long as it is not one
			of the middleware) new functions can be added and removed any time and so we got an open system.</para>
			<para>Basic parts of an universAAL application therefore at first the bundle as the result of the projects. Here Maven
			(<ulink url="http://maven.apache.org/">http://maven.apache.org/</ulink>) will do basic steps for us like shown in DH2.
			Maven is some kind of build-script language that also supports a lokal repository where created files can be included and accessed later on.
			A Nexus-Server (like provided at the Developer Depot) is a possibility to give remote access to a maven-repository. So if we are going
			to upload our application this means to create and install the appropriate bundles into a remote maven repository. Finally, if a user want to
			use this application, uStore need to access the latest version of all needed bundles from the Developer Depont and lets start them in the
			local OSGi environment. All this steps, and many other like the creation of a service, will be supported by the tools presented in this Guide.</para>
		</section>
		
	</chapter>