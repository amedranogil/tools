<?xml version="1.0" encoding="UTF-8"?>
<book version="5.0" xmlns="http://docbook.org/ns/docbook"
      xmlns:xlink="http://www.w3.org/1999/xlink"
      xmlns:xi="http://www.w3.org/2001/XInclude"
      xmlns:db="http://docbook.org/ns/docbook">
  <info>
    <title>Creating a first uAAL application</title> 
        
    <author>
    	<personname>uAAL consurtium</personname>
    </author>
    
    <db:copyright>
    	<db:holder>universAAL</db:holder>
    	<db:year>2011</db:year>
    </db:copyright>
  </info>

<!--  -->
<chapter>
    <title>Introduction</title>
    
    <section>
    	<title>Download installer</title>
	  	  <para> The first prototype is available. It is one package with size of approximately 430 MB and supports both 32 and 64 Bit platforms. 
	  	   The instALL is a NSIS installer script.It can be downloaded from:
	  	  </para> 
		   <db:itemizedlist>
		   	 <db:listitem>
		   	 <ulink url="ftp://ftp.igd.fraunhofer.de/outgoing/cstocklo/instaal-64.exe">64-bit version</ulink>
		  	 </db:listitem>
		  	 <db:listitem>
		     	<ulink url="ftp://ftp.igd.fraunhofer.de/outgoing/cstocklo/instaal-32.exe">32-bit version</ulink>
		     </db:listitem>
		   </db:itemizedlist>
		   
		  
		  <para> The above links are valid for 90 days since 07/05/2011. </para>
    </section>
  </chapter>
  <chapter>
    <title>Install uAAL Development Environment</title>
    <section>
    	<title>Description</title>
	  	  <para> 
		  	  The installation process takes a few minutes. It provides a single setup program to automate this step.
		  	  The installer (NSIS script) is responsible for the download, installation and configuration of the
		  	  following components:
		  	  <db:itemizedlist>
		  	  <db:listitem>JDK</db:listitem>
		  	  <db:listitem>Maven</db:listitem>
		  	  <db:listitem>TortoiseSVN / SlikSVN </db:listitem>
		  	  <db:listitem>Eclipse</db:listitem>
		  	  <db:listitem>Eclipse Plugins</db:listitem>
		  	  <db:listitem>MySQL</db:listitem>
		  	  </db:itemizedlist>
		  </para>
		  
		  <para> The following screen dumps illustrate the steps of instALL installation.  </para>
		  
		  <!--  Figure uAALsetup_1.jpg -->
		  <figure>
		  	<title>uAAL setup.</title>
		  	  <mediaobject>
      			<imageobject>
      				<imagedata fileref="media/introduction/uAALsetup_1.jpg"></imagedata>
      			</imageobject>
		      </mediaobject>
		  </figure>
		  
		  <!--  Figure Installation_Options_2.jpg -->
		  <figure>
		  	<title>Installation options.</title>
		  	  <mediaobject>
      			<imageobject>
      				<imagedata fileref="media/introduction/Installation_Options_2.jpg"></imagedata>
      			</imageobject>
		      </mediaobject>
		  </figure>
		  
		   <!--  Figure Licenses_3.jpg -->
		  <figure>
		  	<title>Licenses.</title>
		  	  <mediaobject>
      			<imageobject>
      				<imagedata fileref="media/introduction/Licenses_3.jpg"></imagedata>
      			</imageobject>
		      </mediaobject>
		  </figure>
		  
		  <!--  Figure Folder_4.jpg -->
		  <figure>
		  	<title>Select folder for the installation.</title>
		  	  <mediaobject>
      			<imageobject>
      				<imagedata fileref="media/introduction/Folder_4.jpg"></imagedata>
      			</imageobject>
		      </mediaobject>
		  </figure>
		  
		    <!--  Figure Summary_5.jpg -->
		  <figure>
		  	<title>Summary</title>
		  	  <mediaobject>
      			<imageobject>
      				<imagedata fileref="media/introduction/Summary_5.jpg"></imagedata>
      			</imageobject>
		      </mediaobject>
		  </figure>
    </section>
  
  </chapter>
<!--  -->
  <chapter>
    <title>AAL Studio overview and installation</title>
   
    <section>
    	<title>Role and benefits of this tool</title>
	  	  <para> The AAL Studio provides an integrated development environment based on Eclipse for building applications and components using the universAAL execution platform. The AAL Studio will make it easier to get started with the development, and will make some of the development tasks more efficient. Also, it will give easy access to the resource needed by the developer.
			The client side developer tools created by universAAL are implemented as Eclipse plug-ins and provide integration with other AAL Studio tools. Thus, while development of universAAL compliant applications and components do not require a specific development Java development environment, use of the Eclipse-based AAL Studio is recommended because it gives access to using the provided tools.
	  	  </para> 
	</section>
	<section>
		<title>Overview of functionality</title>
		<para>The functionality of the AAL Studio is provided by the individual tools that are installed within it, including wizards for creating projects, build tools for simplifying building and launching of applications, and modeling and transformation tools for making the development more efficient.
			For further details of the functionality, see the description on the wiki page for each tool.
		</para>
	</section>

	<section>
		<title>Prerequisites and dependencies</title>
		<para>
		The AAL Studio is based on Eclipse, so the primary prerequisite for installing it is to have a compatible Eclipse version installed. The version we currently recommend is Eclipse 3.5 Modeling Tools, which can be downloaded from:
		
		</para>
		
		<ulink url="http://www.eclipse.org/downloads/packages/release/galileo/sr2"></ulink>
		<para>
		After installing Eclipse, you will also need some prerequisite Eclipse plugins before installing the universAAL tools. These are listed in detail under each of the tools. A quick summary of what is needed to install the full set of tools:
		</para>

		<db:itemizedlist>
		   	 <db:listitem>m2Eclipse maven support from:</db:listitem>
		<ulink url="http://m2eclipse.sonatype.org/sites/m2e/0.10.2.20100623-1649/"></ulink>
		</db:itemizedlist>
		<para>  
		This tool is required by both the wizard and build tools of the AAL Studio
		</para>
		
		<db:itemizedlist>
			<db:listitem>Pax Runner for Eclipse:</db:listitem> 
		<ulink url = "http://www.ops4j.org/pax/eclipse/update"></ulink>
		</db:itemizedlist>
		
		<para>
		This tool is required by the build tool of the AAL Studio in order to support launching of the application.
		</para>
	</section>
	<!-- Tool installation procedure  -->
	<section>
		<title>Tool installation procedure</title>
		<para>
		The Eclipse Update Site for universAAL packages the AAL Studio tools for easy downloading and installation from Eclipse. The update site can be accessed from the built-in functionality of Eclipse. The update site is available at:
		
		<ulink url="http://a1gforge.igd.fraunhofer.de/eclipse-update/"></ulink>
		
		Note that we are intending to move to Eclipse 3.6 Modeling Tools at a lager stage.
		To install the universAAL tools, add the address of the update site to the list of update sites in Eclipse. In version 3.6 of Eclipse, this can be done by first selecting "Install New Software..." under the "Help" menu. In the dialog box that appears, select "Add..." at the top right, and fill in the dialog box that appears. Installation for Eclipse 3.5 is similar.
		</para>
		 <!--  Figure addRepository.PNG -->
		  <figure>
		  	<title>Add Repository</title>
		  	  <mediaobject>
      			<imageobject>
      				<imagedata fileref="media/installation/addRepository.PNG"></imagedata>
      			</imageobject>
		      </mediaobject>
		  </figure>
		
	</section>
	
  </chapter>
   <!--  Chapter Project and Item Wizards -->
  <chapter>
    <title>Project and Item Wizards</title>
   
    <section>
    	<title>Role and benefits of this tool</title>
	  	  <para> This AAL Studio tool is intended to be used by developers of services and platform components. It makes it easy to crate new universAAL-compliant projects by providing a skeleton project with all the files you need and initial content to make the project work in universAAL. The item wizards generate new files required or optional to a universAAL project with the proper formatting and template or initial content.
			It reduces the time of development since without this tool a developer would need to give the project or files the appropriate format to be universAAL-compliant, with the risk of missing some requirement. By using the wizards it is assured to have well-formatted files and project structures.
			The usage of this tool is not mandatory but recommended. The wizard currently provide setup and configuration options which are useful for typical development projects. Future versions may add further options that also simplify more advanced setup and configuration.
	  	  </para> 
	</section>
	    <section>
    	<title>Overview of functionality</title>
	  	  <para> 
	  	    The main access to Project and Item Wizards is through the File/New command in Eclipse. Then the proper wizard must be selected. An Eclipse command is available to start the wizards from any menu or other plugin.
		</para>
		<para>
			This plug-in provides wizards for creating universAAL resources in the Eclipse workspace. They can be either items or new projects. With “items” we refer to new files or other resources inside an existing project in the workspace, such a new XML file that could be necessary for a universAAL project. These new files would be generated with some initial content in order to be properly formatted, as a template, or configured as defined in the parameters passed in the wizard.
		</para>
		<para>	
			On the other hand, the Project wizard would generate a blank new universAAL compliant project in the workspace, ready to develop universAAL applications or components upon. It could be initially configured as described during the wizard, that is, preset configuration parameters, storage location, initial files… The wizard will take care of generating the project hierarchy and structure, and all the mandatory files for the project to be universAAL compliant, as well as any additional file that could be defined by the user in the wizard.
			This "New Project" wizard does always the same: creating a new project in the workspace, based on a very simple set of configurable parameters (Maven information and initial files).
	  	 
	  	   <!--  Figures WizardImages 1 -->
		  <figure>
		  	<title>Wizard:Artifact information</title>
		  	  <mediaobject>
      			<imageobject>
      				<imagedata fileref="media/wizard/WizardImg1.jpg"></imagedata>
      			</imageobject>
		      </mediaobject>
		  </figure>
		  
		  <!--  Figures WizardImages 2 -->
		  <figure>
		  	<title>Wizard:Activator package</title>
		  	  <mediaobject>
      			<imageobject>
      				<db:imagedata fileref="media/wizard/WizardImg2.jpg"></db:imagedata> 
      			</imageobject>
		      </mediaobject>
		  </figure>
		  
		  
		  The "New Item" wizard creates specific items on existing projects and therefore their commands could also be placed in specific contextual menus. Currently it can be accessed either from universAAL commands, the File/New menu, or by right clicking a project/folder and selecting New... The Items that can be generated in the current version are the same template files that can be generated when creating a new project.
		  </para>
		  
		  <!--  Figures WizardImages3 -->
		  <figure>
		  	<title>Create a new item </title>
		  	  <mediaobject>
      			<imageobject>
      				<imagedata fileref="media/wizard/WizardImg3.jpg"></imagedata>
      			</imageobject>
		      </mediaobject>
		  </figure>
		  
	</section>
	
	<section>
		<title>Prerequisites and dependencies</title>
		<para>No dependencies on other universAAL plugins. However it has dependencies on Maven plugin for Eclipse, which is properly notified, requested and installed during installation procedure. However if it is the plug-in source code what is being imported into Eclipse Plug-in Development, instead of the working plug-in itself, the maven plug-in will have to be manually installed to make it available for the code to compile.</para>
	</section>
	
	<section>
		<title>Tool installation procedure</title>
		<para>
		  To install the tool, install it as usual with the "Install new software..." menu for plugins of Eclipse. Only required extra intallation is Maven plugin, as stated above, which is automatic.
		  To import and compile the source code, the Maven plugin must be downloaded manually. To do so, go to "Install new software..." and introduce the Maven download site:
		
		<ulink url="http://m2eclipse.sonatype.org/sites/m2e."></ulink>
		Then select to download the Maven Integration for Eclipse (at least version 0.9.0)</para>
	</section>
</chapter>
	
	<!-- Chapter uaaltools:Service/application project build -->
<chapter>
    <title>Service/application project build</title>
   
    <section>
    	<title>Role and benefits of this tool</title>
	  	  <para>
	  	    This AAL Studio tool is intended for universAAL service developers. It automates the process of building a compatible universAAL project, in order to be integrated to uStore, by utilizing Maven arctifacts and Maven build mechanism.
			Project dependencies are resolved automatically in order to reduce incompatibility issues, since projects are build using universAAL compatible libraries. It also provides automatic uploading of implemented artifacts to local and remote repositories.
			This tool is highly recommended, since manual build and upload can lead to incompatible to universAAL services.
	  	  </para>
	 </section>
	 <section>
	 	<title>Overview of functionality</title>
	 	<para>
	 	This plugin provides a safe way for building and running a universAAL service/application within Eclipse workspace.
		Having based on the prototype skeleton projects by the Project and Items Wizards Tool, the developer implements his application according to universAAL standards. This tool is responsible for building the whole developed Eclipse project using the appropriate libraries and dependencies for making a new universAAL compatible service/application executable. By building such projects, the resulting jar files are deployed to the local or universAAL Maven repositories, in order to be published or reused by other projects/providers. Uploading to remote repositories (uStore) is not implemented yet.
		Finally, this tool also has the capability to run or debug a new developed universAAL project. This is done by automatically creating an Eclipse launch configuration file that starts up all the universAAL middleware bundles that needed in order to run the new service/application.
		</para>
		<para>
		Service/application developer should select the project that wants to build in the Eclipse workspace in order that the universAAL build, run and debug options become accessible, as in the following figure:
	 	</para>
	 	
	 	<!--  Figures WizardImages3 -->
		<figure>
		  	<title>Build,run,debug a uAAL project  </title>
		  	  <mediaobject>
      			<imageobject>
      				<imagedata fileref="media/servicebuild/BuilduAALApp.jpg"></imagedata>
      			</imageobject>
		      </mediaobject>
		</figure>
		<para>
		Then, the following output should appear after a successful build in the Eclipse console:
		</para>
		<figure>
		  	<title>Successfule build</title>
		  	  <mediaobject>
      			<imageobject>
      				<imagedata fileref="media/servicebuild/Build_Maven_Success.JPG"></imagedata>
      			</imageobject>
		      </mediaobject>
		</figure>
		
		<para>along with the following pop-up window.</para>
		
		<figure>
		  	<title>Successfule build</title>
		  	  <mediaobject>
      			<imageobject>
      				<imagedata fileref="media/servicebuild/SucessBuild.jpg"></imagedata>
      			</imageobject>
		      </mediaobject>
		</figure>
		
		<para>
		  Then, the created jar is uploaded automatically to the local repository along with a pom file containing all project dependencies.
		  When running or debugging a service/application, the Pax-runner plugin will start all the necessary middleware bundles in order to run/debug the service/application. The developer can view all the started bundles by typing
		  
		  <figure>
		  	  <title>Typing ps command</title>
		  	  <mediaobject>
      			<imageobject>
      				<imagedata fileref="media/servicebuild/ps.JPG"></imagedata>
      			</imageobject>
		      </mediaobject>
		</figure>
		  in the Eclipse console window. The output of this command should look like:
		</para>
		
		<figure>
		  	<title>List of installed and active bundles</title>
		  	  <mediaobject>
      			<imageobject>
      				<imagedata fileref="media/servicebuild/StartLevel.JPG"></imagedata>
      			</imageobject>
		      </mediaobject>
		</figure>
		
		<para>
			where the bundle with ID 2 is the bundle that has been just uploaded. In order to start running it, the developer should enter the following command:
			<figure>
			  <title>Start bundle 6</title>
		  	  <mediaobject>
      			<imageobject>
      				<imagedata fileref="media/servicebuild/start_6.JPG"></imagedata>
      			</imageobject>
		      </mediaobject>
			</figure>
			where 6 is the default bundle level for new developed project.
		</para>
		
		</section>
	 
	 <section>
		 <title>Prerequisites and dependencies</title>
		 <para>
		 This tools has been developed and tested using Eclipse 3.5.0. Moreover, the m2eclipse plugin is needed in order to run the plugin, and more specifically the 0.10.2.20100623-1649 version (update site:
		 <ulink url = " http://m2eclipse.sonatype.org/sites/m2e/0.10.2.20100623-1649"></ulink>
		 For running the middleware bundles, the Pax Runner plugin has been utilized (update site:
		 <ulink url="http://www.ops4j.org/pax/eclipse/update"></ulink>
		 </para>
	 </section>
	 
	 <section>
	 	<title>Tool installation procedure</title>
	 	<para>
		 	The installation of this plugin is performed through the "Install new Software" option of the "Help" menu of Eclipse IDE. The universAAL eclipse update site should then be inserted(
		 	<ulink urel="http://a1gforge.igd.fraunhofer.de/eclipse-update"></ulink>
		 	)in order to select the Service/Application build plugin.
	 	</para>
	 </section>
</chapter>
	
</book>
