	<chapter>
    	<title>Usage of the tools</title>
    	<para>Now, after we setup the needed environment and got a first impression of universAAL, in this chapter we will have a look at the tools
    	itself. We going to take the lighting example like presented in DH3 to DH7 as a base to show where our tools could support you during
    	development. During the process of creating the example we will explain all tools and give additional hints about their installation and
    	usage. Here we also include tools that are not implemented currently, but already in desgin-phase and will be a part of the next
    	version of this guide. This give you on side the possibility to get the state-of-the-art on on side and to see the whole picture
    	and where we want to go in future about the tools on the other.</para>
    	
    	<section>
    		<title>The lighting example</title>
    		<para>The basic idea of the lighting example from the Developer Handbook is to create an universAAL application that is as easy to
    		understand as possible, but also contains and can represent some basic aspects. The source of the full example can be found at
    		the GForge server within the SVN of the middleware project in "trunk/samples/lighting/". This basic example contains of two bundles,
    		where one is a server and an other one the client. In this case the server bundle is the one that offers some special services and
    		the client will create calls for them. What we want to do here is to control light-sources that are connected to the server from a
    		remote location. Therefore we need several functions within the service provided by the server. These are to get the available
    		light-sources, get information about a special one and finally control them by turning them on or off. In the following we will
    		create, run and deploy the needed projects using our tools, but do not fill them with code (therefore again have a look at the DH).</para>
    	</section>
    	
    	<section>
    		<title>Creating new projects</title>
    		<para>In the following we assume that you have prepared a well running version of eclipse as mentioned in the DH and the previous
    		chapter. Please prepare a new workspace at an arbitrary location we denote as WORKSPACE in the following. Now we are first going
    		to create the server-project of the lighting example. Therefore we can use the "Project and Item Wizards". This makes it easy to create
    		new universAAL-compliant projects by providing a skeleton project with all the files you need and initial content to make the project
    		work in universAAL. The item wizards generate new files required or optional to a universAAL project with the proper formatting and
    		template or initial content. It reduces the time of development since without this tool a developer would need to give the project or
    		files the appropriate format to be universAAL-compliant, with the risk of missing some requirement. By using the wizards it is assured
    		to have well-formatted files and project structures. The usage of this tool is not mandatory but recommended. The wizard currently
    		provide setup and configuration options which are useful for typical development projects. Future versions may add further options
    		that also simplify more advanced setup and configuration.</para>
    		<para>Now we are going to create the server-project by using "universAAL -> Create a new Project" from the menu (must be available
    		after the installation of the AAL Studio plug-in) or "File -> New Project -> universAAL -> universAAL template project". You should
    		see a dialog like given in <xref linkend="img3"/> at the left.</para>
    		
    		<!-- <table frame='none' tocentry='0'>
    			<title>Creation of server project</title>
				<tgroup cols='2' align='center' colsep='0' rowsep='0'>
					<tbody>
						<row frame='none'>
  							<entry>
  								<figure id="img3">
									<title>Create server project</title>
									<graphic width="170px" align="center" fileref="newmedia/itemswizard/ServerProject.png"/>
								</figure>
							</entry>
  							<entry>
  								<figure id="img4">
									<title>Add server classes</title>
									<graphic width="215px" align="center" fileref="newmedia/itemswizard/ServerClasses.png"/>
								</figure>
  							</entry>
						</row>
					</tbody>
				</tgroup>
			</table> -->
			
			<figure id="img3">
				<title>Create server project</title>
				<graphic width="450px" align="center" fileref="newmedia/itemswizard/ServerProject.png"/>
			</figure>
			<!--<figure id="img4">
				<title>Add server classes</title>
				<graphic width="255px" align="center" fileref="newmedia/itemswizard/ServerClasses.png"/>
			</figure>-->
			
			<para>Here we already filled out all fields according the server of the lighting-example. The shown fields are currently suited to the
			needs of Maven. The <emphasis>Group-Id</emphasis> denotes a dependency between several projects. The <emphasis>Artifact-Id</emphasis>
			unique identifies this project. In general you can write here what ever you want, but best practice is to use an URI based approach like
			given in this example. Version of the project is also a mandatory field, here also the proposed value fits to the actual best practice.
			In <xref linkend="img3"/> at the right you see the following dialog, again with already filled out fields. According to the server from the
			lighting example we want to provide a service (done with a Service Callee) and publish context-events about the status of the light-sources
			(done with Context Publisher). <emphasis>Activator Package</emphasis> is the path to the class that will contain the start-method of the
			bundle. So now after finish the dialog. The project will be created and we directly going to create the lighting-project straight forward
			like given before. To make things easier you can see in figure <xref linkend="img5"/> and <xref linkend="img6"/></para>
			
			<!-- <table frame='none' tocentry='0'>
    			<title>Creation of client project</title>
				<tgroup cols='2' align='center' colsep='0' rowsep='0'>
					<tbody>
						<row frame='none'>
  							<entry>
  								<figure id="img5">
									<title>Create server project</title>
									<graphic width="170px" align="center" fileref="newmedia/itemswizard/ClientProject.png"/>
								</figure>
							</entry>
  							<entry>
  								<figure id="img6">
									<title>Add server classes</title>
									<graphic width="195px" align="center" fileref="newmedia/itemswizard/ClientClasses.png"/>
								</figure>
  							</entry>
						</row>
					</tbody>
				</tgroup>
			</table> -->
			
			<figure id="img5">
				<title>Create server project</title>
				<graphic width="450px" align="center" fileref="newmedia/itemswizard/ClientProject.png"/>
			</figure>
  			<!--<figure id="img6">
				<title>Add server classes</title>
				<graphic width="235px" align="center" fileref="newmedia/itemswizard/ClientClasses.png"/>
			</figure>-->
			
			<para>The main differences by creating the client are the changed Artifact-ID and the other added classes. Because here we want
			to receive context-events and call for services, we are going to create a service-caller and a context-subscriber. If both projects are
			created properly the should have a structure like shown in <xref linkend="img7"/>. </para>
			
			<figure id="img7">
				<title>Overview about the created projects</title>
				<graphic width="300px" align="center" fileref="newmedia/itemswizard/ProjectOverview.png"/>
			</figure>
			
			<para>This is already very similar to the one provided in the original lighting example, except of that we are going to create extra classes
			for context publishing and service caller. This is not mandatory because there are standard implementations available (<emphasis>
			DefaultContextPublisher</emphasis> and <emphasis>DefaultServiceCaller</emphasis> like used in the lighting example). The project structure
			also fits the best practice (source and resource folders for code and testing) and needs of Maven (the pom.xml file).
			Like you can see within the server there is already created an additional class <emphasis>ProvidedService</emphasis> that must be used
			for extension of the service-ontology. Also it is possible to add predefined classes after the creation of the project by using the
			<emphasis>New Item</emphasis> wizard that is available over <emphasis>File/New</emphasis> within the main menu or using right-click at
			a special project and select <emphasis>New...</emphasis>. By using the dialog like shown in <xref linkend="img7"/> you can currently
			add the same classes like on creation time of the project.</para>
			
			<figure id="img8">
				<title>Overview about the created projects</title>
				<graphic width="200px" align="center" fileref="newmedia/itemswizard/AddItem.jpg"/>
			</figure>
			
			<para>How to implement the content of all classes is detailed handled in DH5 to DH7 (you can download it from <emphasis>
			http://forge.universaal.org/svn/middleware/trunk/samples/lighting</emphasis>). In the following we assume that the project is fully
			implemented and ready for start.</para>
    	</section>
    	
    	<section>
    		<title>Running the example</title>
    		<para>So now for testing the example we need two further steps. First is to build it, that means to create a jar-file that represents
    		a valid bundle that can be included into the runtime environment. As already mentioned above, the AAL Studio tool automates the
    		process of building a compatible universAAL project, in order to be integrated to uStore, by utilizing Maven artifacts and Maven
    		build mechanism. By using an appropriate plug-in for maven that is able to create a valid Felix-OSGi-Bundle. Details about this you
    		can find in DH3 or have a look into the created pom.xml in both projects (have a look for the <emphasis>maven-bundle-plugin</emphasis>).
    		Our tools will make live easy for you and allows to simply create the needed bundle and install it into the local Maven repository.
    		Therefore simply call <emphasis>Build universAAL Service</emphasis> to build the currently selected project. If everything is fine
    		you will get an pop-up message that show you the success.</para>    		
    		<para>Now we are ready to start example. To start universAAL means to start an instance of the Felix-Runtime environment and load
    		all needed bundles. This contains the one created by us, but also all bundles that are needed for runtime of the platform. The needed
    		steps for this could be quite complicated because many bundles have to be load ever startup. Here our tools come up again. Over the main
    		menu you can also choose "universAAL -> Run universAAL Service". This tool can be used to create a runtime-configuration for the 
    		Pax-Runner Plug-In and execute it. In <xref linkend="img10"/> you can see a screenshot of the valid configuration for the lighting
    		example. </para>
    		
    		<figure id="img10">
				<title>A valid run-configuration for universAAL</title>
				<graphic width="220px" align="center" fileref="newmedia/buildandrun/run.png"/>
			</figure>
			
			<para>Here our projects are highlighted with the two red squares. Currently not both projects will be added to the configuration
			automatically. But you can do the procedure for the server and add the client per hand like shown in the figure
			(<emphasis>mvn:</emphasis>+<emphasis>Group-ID</emphasis>+/+<emphasis>Artefact-ID</emphasis>). After the run has started you
			will see a lot of text running through the console. When starting is finished you can type "ps" to show all installed bundles. In column
			state every bundle should be "Active".</para>
    	</section>
    	
 		<section>
 			<title>Conformance and Deployment</title>
 			<para>After we have created and test the new project (in this case by running it), the next step is now to make conformance testing and
 			deploy them to the Developer Depot. For both parts are currently tools in planning and first versions will be available soon. Information
 			about state of development are available at the Tool Wikipage.</para>
 			<para>The <emphasis>Conformance tool</emphasis> will help you to verify that a project is compliant with the uAAL system architecture. It is designed and
 			configured in order to claim that the software implementation "complies with the reference architecture and design principles". This
 			is the basis for deploying applications. Only applications that are confirmed by the Conformance tool, can be deployed to the
 			Developer Depot by the <emphasis>Developer Depot Client</emphasis> and therefore offered at the uStore. The AAL Studio already contains menu entries for deployment, but currently there
 			is no functionality behind this. In further steps AAL Studio will support the whole development process from creation of the projects,
 			over running and testing them, up to deploy conformed applications to the Developer Depot.</para>
 		</section>
 	
    	<section>
    		<title>Configuration Tool</title>
    		<para>The basic idea of the <emphasis>Configuration Tool</emphasis> tool is to extract parameters for application configuration out of
    		java annotations. So this is gone close the gap between application and end-user in terms of configurable parts within a special application.
    		For example we could extend our lighting application to automatically switch off all lights off between a configurable starting and end-time
    		in the night. UniversAAL will (currently not) support a generic installation process that read out a special XML-based file that come up
    		with the new installation. This file is going to provide information about all parameters that have to be given by the user during the
    		installation. By giving Java-Annotations in the application the Configuration Tool can read out this and create the appropriate
    		configuration file for the application that now can be provided together with it.</para>
    		
    		<para>The Configuration Tool is also an Eclipse plug-in and currently only available within the SVN of the tools-project at the GForge:</para>
    		
    		<para>http://a1gforge.igd.fraunhofer.de/svn/uaaltools/trunk/configuration_extractor/ConfigurationPlugIn/plugins</para>
    		
    		<para>You need to install it manually by copying the jar file into the "\plugins" folder of your Eclipse compilation. Please do not have started Eclipse
    		during this steps. Also you need to	download JDOM like available at <ulink url="http://www.jdom.org">www.jdom.org</ulink>. Within the
    		<emphasis>build</emphasis> folder of JDOM you will find the <emphasis>jdom.jar</emphasis>. You need to add it to the buildpath of
    		the workspace where you want to use the tool. This can be done over the main-menu at <emphasis>Window -> Preferences</emphasis> and
    		then go to <emphasis>Java -> Build Path -> Classpath Variables</emphasis>. Here you add a new variable by using the <emphasis>new</emphasis> button.</para>
    		
    		<para>Below we are giving the example how to add an annotation the the lighting example:</para>
    		
    		<literallayout>
				@ElementL(id="switchoff",type=ElementL.Type.TEXTBOX,label="Switch all lights off at:",
				          title="Light controll",standardvalue="2pm")
				@ElementL(id="switchon",type=ElementL.Type.TEXTBOX,label="Switch all lights on at:",
				          title="Light controll",standardvalue="6pm")
			</literallayout>
			
			<para>Here we say that we need to have two parameters that have a text as input. You can also give a label and a standard value
			that will be displayed during configuration by the user. An other possibility would be to create list as input like done in the
			following example:</para>	 
			
			<literallayout>
				@Lst(label="devices",title="choose device",limit=-1,domain="http://www.universaal.org")
			</literallayout>
    		 
    		<para>You can start the wizard for the Configuration Tool by using the main-menu of eclipse at <emphasis>Net4j Examples -> Extract
    		configuration</emphasis>. Then simply follow the steps on the screen.</para>
    	</section>
	</chapter>