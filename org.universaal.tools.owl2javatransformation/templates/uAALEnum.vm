#macro( toPropConstant $name )PROP_$name.toUpperCase()#end
#macro( toPropertySpecificMethodname $property )
#if ($property.isDataTypeProp())$property.getName().toUpperCase()#else$property.getRange()#end
#end
#macro( getProperRangeDefinitionTerm $prop ) 
#if($prop.isDataTypeProp()) TypeMapper.getDatatypeURI(${prop.getRange()}.class)#else ${prop.getRange()}.MY_URI#end
#end
#macro( toRestrictionMethodCall $restriction ) 
Restriction.#if($restriction.isAllValuesFrom())getAllValuesRestrictionWithCardinality(propURI,
				#getProperRangeDefinitionTerm($restriction.onProperty()), $restriction.getMaxCard(), $restriction.getMinCard())#end 
#if($restriction.isJustCard())getCardinalityRestriction(propURI, $restriction.getMaxCard(), $restriction.getMinCard())#end
#end

/*
	Copyright 2008-2014 Forschungszentrum Informatik FZI, http://www.fzi.de
	
	See the NOTICE file distributed with this work for additional 
	information regarding copyright ownership
	
	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at
	
	  http://www.apache.org/licenses/LICENSE-2.0
	
	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either expressed or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
 */
 
package ${class.getPackageName()};

#foreach ($importPacks in ${class.getImportedPackages()})
import $importPacks.*;
#end## #foreach ($packs in $addPacks)

/**
 * This class represents an ontological concept.
 * <br> <br> 
 * $class.getComment()
 * <br> <br> 
 * This class was generated at $now by velocity.
 */

public class $class.getName() extends $class.getSuperClassName() {

	/** Class URI */
	public static final String MY_URI = "$class.getUri()";
	
#foreach( $prop in $class.getDeclaredProps() )
    /** $prop.getUri() */
	public static final String #toPropConstant($prop.getName()) = "$prop.getUri()";
#end

#foreach( $instance in $class.getInstances() )
	public static final $class.getName() $instance.getName().toUpperCase() = new $class.getName()("$instance.getUri()");
#end

	static {
		register(${class.getName()}.class);
    }
    
    /**
     * Returns the list of all class members guaranteeing that no other members
     * will be created after a call to this method.
     */
    public static ManagedIndividual[] getEnumerationMembers() {
		return new ManagedIndividual[] { 
#foreach( $instance in $class.getInstances() ) 
 						$instance.getName().toUpperCase()#if($velocityCount != $class.getInstances().size()),
#end
#end ##foreach( $instance in $class.getInstances() ) 
		};
    }

    /**
     * Returns the rating with the given URI.
     */
    public static ManagedIndividual getIndividualByURI(String instanceURI) {
	return (instanceURI != null) ? valueOf(instanceURI) : null;
    }
    
    public static final $class.getName() valueOf(String uri) {
		if (uri == null) return null;
#foreach( $instance in $class.getInstances() )
		else if (uri.equals(${instance.getName().toUpperCase()}.getURI())) return $instance.getName().toUpperCase();
#end
		else return null;
    }
		
    
    public static Restriction getClassRestrictionsOnProperty(String propURI) {
## restrictions on declared properties
#foreach( $restriction in $class.getPropertyRestrictions() )
		if (#toPropConstant($restriction.onProperty().getName()).equals(propURI))
			return #toRestrictionMethodCall($restriction);
#end
		return ${class.getSuperClassName()}.getClassRestrictionsOnProperty(propURI);
    }
 
#if ($class.hasDeclaredProps())
    public static String[] getStandardPropertyURIs() {
		return new String[] {
#foreach( $prop in $class.getDeclaredProps() ) 
					#toPropConstant($prop.getName())#if($velocityCount != $class.getDeclaredProps().size()),
#end
#end ##foreach( $prop in $class.getDeclaredProps() ) 

		};
	}
#end ##if ($class.hasDeclaredProps())
	
	/**
     * Returns a human readable description on the essence of this ontology
     * class.
     */
    public static String getRDFSComment() {
		return "$class.getComment()";
    }
    
    /**
     * Returns a label with which this ontology class can be introduced to human
     * users.
     */
    public static String getRDFSLabel() {
		return "${class.getName()}";
    }
    
    protected $class.getName()() {
		super();
    }

    public $class.getName()(String uri) {
		super(uri);
    }

    protected $class.getName()(String uriPrefix, int numProps) {
		super(uriPrefix, numProps);
    }
		
	public boolean isWellFormed() {
		return true;
    }
    
    public int getPropSerializationType(String propURI) {
		return PROP_SERIALIZATION_FULL;
    }
    
#foreach( $restriction in $class.getPropertyRestrictions() )
#if ($restriction.getMaxCard() == 1)
    public void set#toPropertySpecificMethodname($restriction.onProperty())($restriction.onProperty().getRange() value) {
	    super.setProperty(#toPropConstant($restriction.onProperty().getName()) , value);
    }
    
    public $restriction.onProperty().getRange() get#toPropertySpecificMethodname($restriction.onProperty())() {
    	return ($restriction.onProperty().getRange()) props.get(#toPropConstant($restriction.onProperty().getName()) );
    }
    
#end
#if ($restriction.getMaxCard() > 1)
    public void set#toPropertySpecificMethodname($restriction.onProperty())(Set<$restriction.onProperty().getRange()> values) {
	    super.setProperty(#toPropConstant($restriction.onProperty().getName()) , values);
    }
    
    public Set<$restriction.onProperty().getRange()> get#toPropertySpecificMethodname($restriction.onProperty())() {
    	return (Set<$restriction.onProperty().getRange()>) props.get(#toPropConstant($restriction.onProperty().getName()) );
    }
    
#end
#end    
    
    

}
