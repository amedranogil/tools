	/**
 * transformation Service Model UML 2 Java transformation for universAAL
 * date: 14/8/2012
 * author: Erlend Stav, StŒle Walderhaug
 * description: 
 */

texttransformation ServiceModelUML2Java (in uml:"http://www.eclipse.org/uml2/3.0.0/UML") {


/**
 * TODO: Clean up all copied code and write what we really need 
 */

  var ontologyNamespace:String
  var ontologyName:String
  var ontologyNamespaceReference:String
  var propertyHashtable: Hashtable  
  var projectInfo: Hashtable
  var importedModels: Hashtable
  var javaBasePath:String
  var javaOWLSupport:String
  var datatypeImportMap:Hashtable 
  
  var ontologyClassList:Hashtable 
  var ontologyEnumerationList:Hashtable 
  var subPackageList:Hashtable
  
  
 
   /**
   * Main (entry point)
   */
    
  uml.Model::main() {
    var defaultOntologyNamespace:String
  	var defaultOntologyName:String
  	
  	var ontologyNameList:Hashtable
   
    javaBasePath = getEnv("org.universaal.tools.transformationcommand.javadir")
    javaOWLSupport = getEnv("org.universaal.tools.transformationcommand.javaowlsupport")
    
    if (self.hasStereotype("owlOntology")) {
      
      StdOut.println("WARNING!!! The owlOntology stereotype should NOW be applied to the root package(s).")
      StdOut.println("Remember to set all required values (defaultnamespace and name) for each package!") 
      StdOut.println("Continuing with transformation...") 
      StdOut.println("");
      
      defaultOntologyName = self.name 
      defaultOntologyNamespace = self.getStereotypeValue("owlOntology", "defaultNamespace")
 
    }
    
    /*
  	// Initiate a hashmap that contains the supported datatypes and their corresponding java import statements
    self.initDatatypeImportMap()
    //must create the import list.
    self.getImportList()
         
  	self.ownedMember -> forEach( p:uml.Package ){   
  	   ontologyClassList = null
       ontologyEnumerationList = null
       subPackageList = null
        
  	   if (!p.hasStereotype("owlOntology")) {
			StdOut.println("WARNING!!! The package " + p.name + " is not stereotyped with owlOntology!")  
			if(defaultOntologyName==null) {
				StdOut.println("It is required to set the owlOntology stereotype on ALL root package.")
				StdOut.println("To perform the transformation, add this information to the model.")
				StdOut.println("Skipping package " + p.name.trim())
     			StdOut.println("");
 				break
			}
			else {
				StdOut.println("Continuing transformation of package with information from the owlOntology sterotype of the model root.")
			}
		}
    	//TODO: HANDLE unset packages
    
    	ontologyName = p.name.substring(p.name.lastIndexOf(".")+1, p.name.size()) //get the last segment of the packagename 
    	StdOut.println("Generating Java classes for package: " + ontologyName)
    
    	ontologyNamespace = p.getStereotypeValue("owlOntology", "defaultNamespace")
    	if (ontologyNamespace.equals("")) {
    	  ontologyNamespace = defaultOntologyNamespace
    	}
    	StdOut.println("Namespace: "+ontologyNamespace) 
    	ontologyNamespaceReference =  ontologyName +  'Ontology.NAMESPACE'       
       
      
        //recursively create the ontology classes and enumerations
        p.processOntologyPackage()  
		subPackageList.remove(p.getFullPackageName().trim()) //remove own reference      
           
		//then the main ontology class and the factories for each package.		
		StdOut.println("Handling main ontology class for :" + p.name) 
		
   		p.generateMainOntologyClass(ontologyClassList, ontologyEnumerationList)
  	
   		
   		p.generateFactory(ontologyClassList)
   		
   		if (javaOWLSupport.equals("true"))
   			p.generateCreator(ontologyClassList)
   		
   		//at the package to list of ontologies
   		ontologyNameList.put(p.name.trim(), ontologyName)
   		
  	}


	StdOut.println("Handling activator of :" + self.name) 
   	self.generateActivator(ontologyNameList)

	//StdOut.println("Generating the POM file")
	//create the POM file for the project
	//self.generatePOMFile() 
	*/
  }
 

}

