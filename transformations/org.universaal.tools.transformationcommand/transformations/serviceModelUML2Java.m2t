	/**
 * transformation Service Model UML 2 Java transformation for universAAL
 * date: 14/8/2012
 * author: Erlend Stav, StŒle Walderhaug
 * description: 
 */

texttransformation ServiceModelUML2Java (in uml:"http://www.eclipse.org/uml2/3.0.0/UML") {


/**
 * TODO: Clean up all copied code and write what we really need 
 * 
 */

  var ontologyNamespace:String
  var ontologyName:String
  var ontologyNamespaceReference:String
  var propertyHashtable: Hashtable  
  var projectInfo: Hashtable
  var importedModels: Hashtable
  var javaBasePath:String
  var javaOWLSupport:String
  var datatypeImportMap:Hashtable 
  
  var ontologyClassList:Hashtable 
  var ontologyEnumerationList:Hashtable 
  var subPackageList:Hashtable
  
  
 
   /**
   * Main (entry point)
   */
    
  uml.Model::main() {
    var defaultOntologyNamespace:String
  	var defaultOntologyName:String
  	
  	var ontologyNameList:Hashtable
   
   	'Transforming UML service model to Java...
   	'
    javaBasePath = getEnv("org.universaal.tools.transformationcommand.javadir")
    javaOWLSupport = getEnv("org.universaal.tools.transformationcommand.javaowlsupport")
    
    self.ownedMember -> forEach( p:uml.Package ){  
      	//need a guard to control package type/stereotype 
   		
   		//generate activator
   		p.generateActivator(ontologyNameList)
   	
   		//generate provider (serviceprofile)
   		p.ownedMember->forEach( interf : uml.Interface) {
 			interf.generateServiceProfile()

   			//generateServiceCallee
   			interf.generateServiceCallee()
   		  
   		}
   		
    }
    /*
  	// Initiate a hashmap that contains the supported datatypes and their corresponding java import statements
    self.initDatatypeImportMap()
    //must create the import list.
    self.getImportList()
         
  	self.ownedMember -> forEach( p:uml.Package ){   
  	   ontologyClassList = null
       ontologyEnumerationList = null
       subPackageList = null
        
  	   if (!p.hasStereotype("owlOntology")) {
			StdOut.println("WARNING!!! The package " + p.name + " is not stereotyped with owlOntology!")  
			if(defaultOntologyName==null) {
				StdOut.println("It is required to set the owlOntology stereotype on ALL root package.")
				StdOut.println("To perform the transformation, add this information to the model.")
				StdOut.println("Skipping package " + p.name.trim())
     			StdOut.println("");
 				break
			}
			else {
				StdOut.println("Continuing transformation of package with information from the owlOntology sterotype of the model root.")
			}
		}
    	//TODO: HANDLE unset packages
    
    	ontologyName = p.name.substring(p.name.lastIndexOf(".")+1, p.name.size()) //get the last segment of the packagename 
    	StdOut.println("Generating Java classes for package: " + ontologyName)
    
    	ontologyNamespace = p.getStereotypeValue("owlOntology", "defaultNamespace")
    	if (ontologyNamespace.equals("")) {
    	  ontologyNamespace = defaultOntologyNamespace
    	}
    	StdOut.println("Namespace: "+ontologyNamespace) 
    	ontologyNamespaceReference =  ontologyName +  'Ontology.NAMESPACE'       
       
      
        //recursively create the ontology classes and enumerations
        p.processOntologyPackage()  
		subPackageList.remove(p.getFullPackageName().trim()) //remove own reference      
           
		//then the main ontology class and the factories for each package.		
		StdOut.println("Handling main ontology class for :" + p.name) 
		
   		p.generateMainOntologyClass(ontologyClassList, ontologyEnumerationList)
  	
   		
   		p.generateFactory(ontologyClassList)
   		
   		if (javaOWLSupport.equals("true"))
   			p.generateCreator(ontologyClassList)
   		
   		//at the package to list of ontologies
   		ontologyNameList.put(p.name.trim(), ontologyName)
   		
  	}


	StdOut.println("Handling activator of :" + self.name) 
   	self.generateActivator(ontologyNameList)

	//StdOut.println("Generating the POM file")
	//create the POM file for the project
	//self.generatePOMFile() 
	*/
  }
 
 uml.Package::generateActivator(ontNameList : Hashtable) {
   //generate the activatorfile based on the ontologies applied and project name
 
 }
 
 
 uml.Interface::generateServiceProfile() {
   
   	var serviceName:String = self.name.trim()
	file( javaBasePath + "/" + self.getFullPackageName().replace("\\.", "/") + serviceName + ".java" )
   
	//generate header
	self.generateServiceProfileHeader()
	
	//generate imports
//	self.generateServiceProfileImports()
	
	
	//declare and initialize properties
	
	//register ontology classes
	
	//
	
	 
  
 }
 
 uml.Interface::generateServiceCallee() {
 
 }
 
 uml.Interface::generateServiceProfileHeader() {
 // First, find package/interface? name to become service name?	
 
'
package ' self.getFullPackageName() '; 

import java.util.Hashtable;

import org.universAAL.middleware.owl.Enumeration;
import org.universAAL.middleware.owl.MergedRestriction;
import org.universAAL.middleware.owl.OntologyManagement;
import org.universAAL.middleware.owl.SimpleOntology;
import org.universAAL.middleware.rdf.Resource;
import org.universAAL.middleware.rdf.TypeMapper;
import org.universAAL.middleware.rdf.impl.ResourceFactoryImpl;
import org.universAAL.middleware.service.owls.profile.ServiceProfile;
import org.universAAL.ontology.lighting.ElectricLight;
import org.universAAL.ontology.lighting.LightSource;
import org.universAAL.ontology.lighting.Lighting;
import org.universAAL.ontology.location.Location;
import org.universAAL.ontology.phThing.PhysicalThing;
'
	self.generateServiceProfileImports()
	
 }

 uml.Interface::generateServiceProfileImports() { 
  
 }



// Reuse from ontUML2JavaV2

  //get the full name of the root package
  uml.Classifier::getFullOwnerPackageName():String {
    if (self.owner!=null) {
      return self.owner.getFullPackageName()
    }
  	return ""
  }
  
 
  uml.Classifier::getFullPackageName():String {
  	if(self.owner !=null) {
  	  var targetName:String
  	  targetName = self.owner.getFullPackageName() 
  	  if (targetName.equals("")) {
  	  	return self.name.trim()
  	  }
  	  else {
  	  	return targetName.trim() + "." + self.name
  	  }
  	}
  	else {
  		return ""
  	}
  }


  uml.Operation::generateAnnotated() {
'
	@ServiceOperation
'
	// Print any outputs 
	
	
	// Print any change effects
	
	// Print the method signature
'	public '

'('
    self.ownedParameter->forEach(par:uml.Parameter) {
      if (par.direction == "out") {
        '!!'
      }
	  par.direction + ' ' + par.type.name + ' ' par.name ','
      //uml.ParameterDirectionKind._getFeature("return")
    }
')
'	
	
    
  }  




}

